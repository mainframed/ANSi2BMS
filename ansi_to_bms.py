#!/usr/bin/env python3
#
# Converts ANSI art to CICS BMS MAP. Run without arguments to see usage.
# 
# Author: Philip Young, Soldier of FORTRAN
# License: GPL v3
# Date: 07/11/2020
#
# THE FUTURE IS NOW OLD MAN!
#

import datetime
import sys
import re

if len(sys.argv) < 4:
    print("ANSI to CICS BMS HLASM Map tool.\n\nRequires an ANSI file (tested with the Moebius ANSI editor).\n")
    print("For map variables set the background color you'd like to use. The field starts with the first character and ends when the baground or text ends, you will be prompted for variable a name.\n")
    print("The input background colors determine what its for:\n\tDark Red: User input, insert cursor here\n\tDark Green: User input with underline\n\tDark Blue: Protected field\n\tPurple: User input with underline, delete placeholder text.\n\tDark Turquoise: Protected field, delete placeholder text.\n")
    print("See example ANSI file: ansi-test-map.ans\n")
    print("Note: Colors cannot be in contigous blocks, you need a space for every color change.\n")
    print("Usage:\n\t{} <MAPSET name e.g. TEST max 7 chars> <MAP name e.g. TESTMP1 max 7 chars> some_ansi_file.ansi\n".format(sys.argv[0]))
    sys.exit(-1)
elif len(sys.argv[1]) > 7:
    print("Mapset name {} to long: Lenght: {} > Max Length: 7".format(sys.argv[1], len(sys.argv[1])))
    sys.exit(-1)
elif len(sys.argv[2]) > 7:
    print("Map name {} to long: Lenght: {} > Max Length: 7".format(sys.argv[2], len(sys.argv[2])))
    sys.exit(-1)

ANSI_DICT = {
    '0' : 'REMOVE ATTRIBUTES',
    '1' : 'BOLD',
    '30' : 'NEUTRAL',
    '31': "RED",
    '32': "GREEN",
    '33': "YELLOW",
    '34': "BLUE",
    '35': "PINK", #magenta
    '36': "TURQUOISE", #cyan
    '37': "NEUTRAL", #white
}
final_hlasm = ''
start = '''* HLASM BMS Map from {ansi_file}
* Generated using ansi_to_bms.py by Philip Young
* Generated on: {date}
CICSMAP  TITLE 'Autogenerated BMS'
         PRINT NOGEN
{mapname:<9}DFHMSD TYPE=&SYSPARM,                                         X
               MODE=INOUT,                                             X
               LANG=COBOL,                                             X
               DSATTS=(COLOR,HILIGHT),MAPATTS=(COLOR,HILIGHT),         X
               TIOAPFX=YES,                                            X
               CTRL=FREEKB,STORAGE=AUTO  
* Below is the MAP name, you use this in COBOL to reference the MAP
* You could have more than one map, hence size/line/column
{option:<9}DFHMDI SIZE=(24,80),                                          X
               LINE=1,                                                 X
               COLUMN=1
'''
end = '''         DFHMSD TYPE=FINAL
         END'''

symbols = []

def get_symbol():
    symbol = input("Input variable/symbol name: ")
    symbol = symbol.upper()
    while len(symbol) > 7:
        print("Max character length is 7, you entered {} ({}). Try again.".format(symbol, len(symbol)))
        symbol = input("Input variable/symbol name: ")
        symbol = symbol.upper()
    while symbol in symbols:
        print("{} already exists in this map. Try again.".format(symbol))
        symbol = input("Input variable/symbol name: ")
        symbol = symbol.upper()
    if len(symbol) > 0 :
        symbols.append(symbol)
    return symbol

def print_dfh(variable_name, process_string, current_color, bg_color, s_x=0, s_y=0):
    bgc = ANSI_DICT[bg_color]
    
    #hlasm = "* Color {} Background: {}".format(ANSI_DICT[current_color], bgc)
    hlasm =  ( hlasm_pos.format(variable = variable_name, row=s_x, column=s_y) +
               hlasm_len.format(len=len(process_string)) +
               hlasm_col.format(color=ANSI_DICT[current_color])[:71] + "X" + "\n" )
    
    if bgc in ['RED', 'GREEN', 'PINK']:
        hlasm += hlasm_hlt 
    
    if bgc == 'RED': # Mark and insert field and insert the cursor
        hlasm += hlasm_att_input_cursor
    elif bgc in ['GREEN', 'PINK' ]: # Mark and insert field
        hlasm += hlasm_att_input
    else:
        hlasm += hlasm_att

    if bgc not in ['PINK', 'TURQUOISE']:
        initial = ''
        if len(process_string) > 46:
            initial = hlasm_txt_long.format(text=process_string[:47].replace("'","\""),
                                            text2=process_string[47:].replace("'","\"")) 
        else:
            initial = hlasm_txt.format(text=process_string.replace("'","\"")) 
        hlasm += initial
    else:
        hlasm = hlasm[:-2].rstrip()[:-1] + "\n"

    if bgc in ['RED', 'GREEN', 'PINK']:
        hlasm += hlasm_rst.format(row=s_x, column=(s_y + len(process_string) + 1))  
    
    return hlasm 



final_hlasm = start.format(date=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), ansi_file=sys.argv[3], mapname=sys.argv[1].upper(), option=sys.argv[2].upper())


hlasm_pos =       '*\n{variable:<9}DFHMDF POS=({row:02d},{column:02d}),                                           X\n'
hlasm_len =       '               LENGTH={len:02d},                                              X\n'
hlasm_col =       '               COLOR={color},                                                              '
hlasm_att =       '               ATTRB=(NORM,PROT),                                      X\n'
hlasm_att_input_cursor = '               ATTRB=(NORM,UNPROT,IC,FSET),                            X\n'
hlasm_att_input = '               ATTRB=(NORM,UNPROT,FSET),                               X\n'

hlasm_txt =       '               INITIAL=\'{text}\'\n'
hlasm_txt_long =  '               INITIAL=\'{text}X\n               {text2}\'\n'
hlasm_rst =       '         DFHMDF POS=({row:02d},{column:02d}),LENGTH=1,ATTRB=ASKIP\n'
hlasm_hlt =       '               HILIGHT=UNDERLINE,                                      X\n'
'''

               HILIGHT=UNDERLINE,                                      X

               INITIAL='_'

'''
escaped = False
text = False
escape = ''
x = 1
y = 0
s_x=0
s_y=0
string = ''
process_string = ''
variable = False
variable_name = ''
prev_variables = []

f = open(sys.argv[3], "r", encoding='latin-1')
cics_map = f.read()

#Remove ANSI SAUCE record
if 'SAUCE' in cics_map[-129:]:
    cics_map = cics_map[:-129]

current_color = '37'
background_color = '0'

for byte in cics_map:
    # Do stuff with byte.
    if escaped:
        if byte != "m" and byte != "[":
            escape = escape + byte
        elif byte == "m":
        #escape = escape + str(byte)
            escaped = False
            for ansi_escape in escape.split(';'):
                if ansi_escape not in ['0', '1'] and int(ansi_escape) < 40:
                    current_color = ansi_escape
                elif int(ansi_escape) >= 40:
                    background_color = str(int(ansi_escape) - 10)
                    variable = True
                elif ansi_escape == '1':
                    current_color = '37'
                elif ansi_escape == '0':
                    variable = False
                    variable_name = ''
            escape = ''
            continue
    else: 
        if ord(byte) == ord('\x1b'):
            if text:
                text = False
                process_string = string
                if variable:
                    print("Initial=\'{}\'".format(process_string))
                    variable_name = get_symbol()
                final_hlasm += print_dfh(variable_name, process_string, current_color, background_color, s_x, s_y)
                background_color = '0'
                string = ''
            escaped = True
            continue
        elif byte == "\n":
            x = x + 1
            y = 0
            text = False
            process_string = string
            string = ''
            continue
        elif byte == "\r":
            continue
        elif byte != " " and not text:
            s_x = x
            s_y = y
            text = True
            string = string + byte
        elif byte != " " and text:
            string = string + byte
        elif variable and text:
            string = string + byte
        elif text and byte == " " and not variable:
            text = False
            process_string = string
            #print("process_string: {}, current_color: {}, background_color: {}, s_x: {}, s_y: {}".format(process_string, current_color, background_color, s_x, s_y) )
            final_hlasm += print_dfh(variable_name, process_string, current_color, background_color, s_x, s_y)
            background_color = '0'
            string = ''
            variable_name = ''
            
        y += 1
        if y > 80:
          y = 1
          x += 1
        if x > 24:
            #print("Screen size larger than 24 rows not supported")
            break
        
final_hlasm += end

print('{dashes} ><8  CUT HERE 8>< {dashes}'.format(dashes = "-" * 30) )

print(final_hlasm)
print('{dashes} ><8  CUT HERE 8>< {dashes}'.format(dashes = "-" * 30) )
print("Writting output: {}".format(sys.argv[3]+".bms"))
with open(sys.argv[3]+".bms", 'w') as outfile:
    outfile.write(final_hlasm)
